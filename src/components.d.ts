/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { BuBox as BuBox } from './components/bu-box/bu-box';

interface HTMLBuBoxElement extends BuBox, HTMLElement {
}
declare var HTMLBuBoxElement: {
  prototype: HTMLBuBoxElement;
  new (): HTMLBuBoxElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "bu-box": HTMLBuBoxElement;
  }
  interface ElementTagNameMap {
      "bu-box": HTMLBuBoxElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "bu-box": JSXElements.BuBoxAttributes;
      }
  }
  namespace JSXElements {
      export interface BuBoxAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { BuButton as BuButton } from './components/bu-button/bu-button';

interface HTMLBuButtonElement extends BuButton, HTMLElement {
}
declare var HTMLBuButtonElement: {
  prototype: HTMLBuButtonElement;
  new (): HTMLBuButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "bu-button": HTMLBuButtonElement;
  }
  interface ElementTagNameMap {
      "bu-button": HTMLBuButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "bu-button": JSXElements.BuButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface BuButtonAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          type?: string,
          value?: string,
          disabled?: boolean,
          size?: string,
          outlined?: boolean,
          inverted?: boolean,
          hovered?: boolean,
          focused?: boolean,
          active?: boolean,
          loading?: boolean
      }
  }
}

import { MdButton as MdButton } from './components/md-button/md-button';

interface HTMLMdButtonElement extends MdButton, HTMLElement {
}
declare var HTMLMdButtonElement: {
  prototype: HTMLMdButtonElement;
  new (): HTMLMdButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "md-button": HTMLMdButtonElement;
  }
  interface ElementTagNameMap {
      "md-button": HTMLMdButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "md-button": JSXElements.MdButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface MdButtonAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

